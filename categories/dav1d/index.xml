<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dav1d on Krishnan&#39;s blog</title>
    <link>http://localhost:1313/categories/dav1d/</link>
    <description>Recent content in Dav1d on Krishnan&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Aug 2019 12:32:45 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/dav1d/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GSoC&#39;19 - dav1d ARM NEON Optimization</title>
      <link>http://localhost:1313/dav1d/2019-08-19-gsoc19-final-report/</link>
      <pubDate>Mon, 19 Aug 2019 12:32:45 +0100</pubDate>
      <guid>http://localhost:1313/dav1d/2019-08-19-gsoc19-final-report/</guid>
      <description>&lt;p&gt;So here we come to an end of my GSoC&#39;19 project under VideoLAN.&lt;/p&gt;&#xA;&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#project-overview&#34;&gt;Project Overview&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#target-device&#34;&gt;Target Device&lt;/a&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#setting-up-the-device&#34;&gt;Setting up the device&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#building-dav1d&#34;&gt;Building dav1d&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#accessing-counter-registers&#34;&gt;Accessing Counter Registers&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#directory-structure-of-dav1d&#34;&gt;Directory Structure of dav1d&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#analysing-c-function&#34;&gt;Analysing C function&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#simd-the-idea&#34;&gt;SIMD: The Idea&lt;/a&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#instructions-in-simd&#34;&gt;Instructions in SIMD&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#declaring-neon-asm-function&#34;&gt;Declaring NEON ASM Function&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#writing-neon-asm-function-for-aarch32&#34;&gt;Writing NEON ASM Function for AARCH32&lt;/a&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#jump-table-for-aarch32&#34;&gt;Jump Table for AARCH32&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#implmentation-for-aarch32&#34;&gt;Implmentation for AARCH32&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#checkasm-and-benchmarking&#34;&gt;Checkasm and Benchmarking&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#optimization-for-aarch32&#34;&gt;Optimization for AARCH32&lt;/a&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#loop-unrolling-aarch32&#34;&gt;Loop Unrolling AARCH32&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#instruction-reordering-aarch32&#34;&gt;Instruction Reordering AARCH32&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#memory-alignment&#34;&gt;Memory Alignment&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#from-aarch32-to-aarch64&#34;&gt;From AARCH32 to AARCH64&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#list-of-commits&#34;&gt;List of Commits&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#whats-left-out&#34;&gt;What&amp;rsquo;s Left out!&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#final-note-and-things-i-learnt&#34;&gt;Final Note and Things I learnt&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;project-overview&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt; Project Overview&lt;/h2&gt;&#xA;&lt;p&gt;The project dealt with analysing various functions implemented in C language and then implement same in ARM assembly using SIMD architecture for both 32 and 64 bit processors. This will enhance efficiency in terms of both execution speed and binary size. There was performance testing involved after the function was implemented in assembly by using counter registers which helped in benchmarking the number of instruction cycles a function gets executed. Benchmarking was done for improving the production quality of dav1d across ARMv8 and ARMv7 devices.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SIMD in ARM</title>
      <link>http://localhost:1313/dav1d/2019-06-04-dav1d-arm-neon-optimization/</link>
      <pubDate>Sat, 08 Jun 2019 12:32:45 +0100</pubDate>
      <guid>http://localhost:1313/dav1d/2019-06-04-dav1d-arm-neon-optimization/</guid>
      <description>&lt;p&gt;So now let&amp;rsquo;s talk about the project I am working on but before further proceedings let me remind about the tutorial to &lt;a href=&#34;https://thinkingeek.com/arm-assembler-raspberry-pi/&#34;&gt;refer&lt;/a&gt; to, if you have understood those or already know about ARM assembly then we are on the same page.&lt;/p&gt;&#xA;&lt;p&gt;My project is &amp;ldquo;dav1d ARM NEON optimization&amp;rdquo; and, I have applied under GSoC&#39;19 program and the project is initiated and maintained by VideoLAN and FFmpeg. So dav1d is an av1 decoder which like any other decoder aspires to be fast and efficient. It is available for x86, x64, ARMv7, ARMv8 architectures, my project deals with ARM arch specifically ARMv7-a. So to make code exec efficient and fast we need to cut-off in between generalised high-level language compiler and directly talk with assembly lang to the processor(communication with a native language on a country land will always be a fine interpretation to that of foriegn language). It makes code development bit tough but trust me when you see the difference, it&amp;rsquo;s all worth the patience, time and effort.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to ARM Assembly and dav1d</title>
      <link>http://localhost:1313/dav1d/2019-06-04-introduction-to-assembly-and-dav1d/</link>
      <pubDate>Tue, 04 Jun 2019 12:32:45 +0100</pubDate>
      <guid>http://localhost:1313/dav1d/2019-06-04-introduction-to-assembly-and-dav1d/</guid>
      <description>&lt;h2 id=&#34;general-assembly&#34;&gt;General Assembly&lt;/h2&gt;&#xA;&lt;p&gt;The first thing to know about the assembly is, it&amp;rsquo;s very much architecture dependant so for every different architecture there&amp;rsquo;s a completely different story. Secondly, it&amp;rsquo;s hard to get but that makes it more interesting.&lt;/p&gt;&#xA;&lt;p&gt;So before stepping into ARM assembly, I have written assembly programs and studied architecture in detail for mid-range micro-controllers. Also, I have done bit study for TMS320C6000 and TMS320F28027, they are like DSP processors so data lines and processor units are bit different there.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
